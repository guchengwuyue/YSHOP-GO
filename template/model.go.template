package models


type {{.ClassName}} struct {
    {{ range .Columns }}
    {{$x := .Pk}}
    {{ if ($x) }}
    {{ else if eq .GoField "UpdateTime" }}
    {{ else if eq .GoField "CreateTime" }}
    {{ else if eq .GoField "IsDel" }}
    {{ else if eq .GoField "Id" }}
    {{ else }}
    {{.GoField}} {{.GoType}} `json:"{{.JsonField}}"` {{end }}
    {{ end }}
    BaseModel
}

func ({{.ClassName}}) TableName() string {
    return "{{.TBName}}"
}


// get all
func GetAll({{.ClassName}})(pageNUm int, pageSize int, maps interface{}) (int64, []{{.ClassName}}) {
	var (
		total int64
		list []{{.ClassName}}
	)

	db.Model(&{{.ClassName}}{}).Where(maps).Count(&total)
	db.Where(maps).Offset(pageNUm).Limit(pageSize).Find(&list)

	return total, list
}

// last inserted Id on success.
func Add{{.ClassName}}(m *{{.ClassName}}) error {
	var err error
	if err = db.Create(m).Error; err != nil {
		return err
	}

	return err
}

func UpdateBy{{.ClassName}}(m *{{.ClassName}}) error {
	var err error
	err = db.Save(m).Error
	if err != nil {
		return err
	}

	return err
}

func DelBy{{.ClassName}}(ids []int64) error {
	var err error
	err = db.Where("id in (?)", ids).Delete(&{{.ClassName}}{}).Error
	if err != nil {
		return err
	}

	return err
}
