/**
* Copyright (C) 2020-2021
* All rights reserved, Designed By www.yixiang.co
* 注意：本软件为www.yixiang.co开发研制
 */

package admin

import (

	"github.com/gin-gonic/gin"
	"github.com/unknwon/com"
	"net/http"
	"yixiang.co/go-mall/app/models"
	"yixiang.co/go-mall/app/service/{{.BusinessName}}_service"
	"yixiang.co/go-mall/pkg/app"
	"yixiang.co/go-mall/pkg/constant"
	"yixiang.co/go-mall/pkg/util"
)

type {{.ClassName}}Controller struct {
}

// @Title 获取{{.TableComment}}列表
// @Description 获取{{.TableComment}}列表
// @Success 200 {object} app.Response
// @router / [get]
func (e *{{.ClassName}}Controller) GetAll(c *gin.Context) {
	var (
		appG = app.Gin{C: c}
	)
	enabled := com.StrTo(c.DefaultQuery("enabled","-1")).MustInt()
	name := c.DefaultQuery("blurry","")
	service := {{.BusinessName}}_service.{{.ClassName}}{
		Enabled: enabled,
		Name: name,
		PageSize: util.GetSize(c),
		PageNum: util.GetPage(c),
	}
	vo := service.GetAll()
	appG.Response(http.StatusOK,constant.SUCCESS,vo)
}


// @Title 添加{{.TableComment}}
// @Description 添加{{.TableComment}}
// @Success 200 {object} app.Response
// @router / [post]
func (e *{{.ClassName}}Controller) Post(c *gin.Context) {
	var (
		model models.{{.ClassName}}
		appG  = app.Gin{C: c}
	)
	httpCode, errCode := app.BindAndValid(c, &model)
	if errCode != constant.SUCCESS {
		appG.Response(httpCode, errCode, nil)
		return
	}
	service := {{.BusinessName}}_service.{{.ClassName}}{
		M: &model,
	}

	if err := service.Insert(); err != nil {
		appG.Response(http.StatusInternalServerError, constant.FAIL_ADD_DATA, nil)
		return
	}

	appG.Response(http.StatusOK, constant.SUCCESS, nil)
}

// @Title 修改{{.TableComment}}
// @Description 修改{{.TableComment}}
// @Success 200 {object} app.Response
// @router / [put]
func (e *{{.ClassName}}Controller) Put(c *gin.Context) {
	var (
		model models.{{.ClassName}}
		appG  = app.Gin{C: c}
	)
	httpCode, errCode := app.BindAndValid(c, &model)
	if errCode != constant.SUCCESS {
		appG.Response(httpCode, errCode, nil)
		return
	}
	service := {{.BusinessName}}_service.{{.ClassName}}{
		M: &model,
	}

	if err := service.Save(); err != nil {
		appG.Response(http.StatusInternalServerError, constant.FAIL_ADD_DATA, nil)
		return
	}

	appG.Response(http.StatusOK, constant.SUCCESS, nil)
}

// @Title 删除{{.TableComment}}
// @Description 删除{{.TableComment}}
// @Success 200 {object} app.Response
// @router /:id [delete]
func (e *{{.ClassName}}Controller) Delete(c *gin.Context) {
	var (
		ids  []int64
		appG = app.Gin{C: c}
	)
	if strId := c.Param("id") ; strId != "" {
        id := com.StrTo(strId).MustInt64()
        ids = append(ids, id)
    }else {
        c.BindJSON(&ids)
    }

	service := {{.BusinessName}}_service.{{.ClassName}}{Ids: ids}
	if err := service.Del(); err != nil {
		appG.Response(http.StatusInternalServerError, constant.FAIL_ADD_DATA, nil)
		return
	}

	appG.Response(http.StatusOK, constant.SUCCESS, nil)
}



